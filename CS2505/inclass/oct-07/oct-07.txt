oct 7 notes on arrays
-last class: created either statically or dynamically

int array[10]; //static allocation

int* array = malloc(10*sizeof(int)); //dynamically

Identifier Attributes

When we create identifiers in C, they have attributes.

What is an identifier?

Scope: Scope is where it is legal to refer to an identifier.

We have a few different kinds of scope.

1. Global scope. For variables, this is evil. Ew
                 For functions, this is good, Yum
                 For constants, fantastic, do this all day 
                 For structs, same

                 Global scope is when we are outside of any function definitions.

                 int x; //Global
                 int main() {
                    int x; //not global
                 }
2. Local scope
        This is when we delcare a variable inside of a function.

        void function() {
            intx //local variable
        }

Lifetime: How long a variable stays in memory

We have two kinds of lifetime.

1. Automatic
        When we enter a scope, aka a function, local variables are create, used and then cleaned up when the function ends.

2. static
        these extend their lifetime for the duration of the program. 
        They can include global variables
        Static vairables are stored in different locations in memory 
        from our automatic variables

        int function() {
            static int x = 0;
            //the first time the function is entered
            //x is given the value 8
            //subsequent call to function x will retain
            //the value from previous calls.
            x = x + 1;
        }

Linkage

In C we have various ways that identifiers can be linked

3 types of Linkage

1. Exteranal Linkage
        these are global variables, and variables that are declared extern.

        extern int errno;

2. Internal Linkage
        Functions, or vairables, that are limited in scope to the file they are delcared in.

        static int x;
        static void function();

        int main(){

        }

3. No Linkage
        Local variables

Pointers

A pointer is a variables thats stores a memory address. 

Declaring Pointers

data-type* name;

int * x;

It does not matter if the * is on the data type, the name, niether, or both

int*x;
int *x;
int* x;
int * x;

To access the target if the pointer, that is the thing the pointer points to, we need to dereference the pointer
*x = 7; this would update the target of x to be 7

We can store NULL as a pointer to set it to nothing

x = NULL; //nulle is generally 0, but does not need to be

//can we do this

int *x = 7;//this would assign the address 7 to the pointer.